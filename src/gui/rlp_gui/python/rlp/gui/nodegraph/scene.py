

import uuid

import rlp.gui as RlpGui


class NodeGraphScene(RlpGui.GUI_PaintedItemBase):

    _SCENES = {}

    def __init__(self, view, scene_uuid):
        RlpGui.GUI_PaintedItemBase.__init__(self, view)
        self.__scene_id = scene_uuid

        self.__viewport_id = -1

        self._view_node_id = None # The node to view at
        self.__view = view

        self._node_map = {}
        self._node_type_map = {}
        self._connections = []

        self.selectedNode = None

        # the scene doesn't draw anything to the UI, but
        # this appears to be needed for a small node redraw bug
        # where nodes may disappear if panes are resized
        self.setWidth(view.width())
        self.setHeight(view.height())

        NodeGraphScene._SCENES[scene_uuid] = self

        view.connectionCreated.connect(self.onConnectionCreated)


    @classmethod
    def getSceneById(cls, scene_uuid):
        return cls._SCENES.get(scene_uuid)


    @property
    def view(self):
        return self.__view

    @property
    def scene_id(self):
        return self.__scene_id

    def setSceneId(self, sid):
        self.__scene_id = sid

    @property
    def view_node_id(self):
        return self._view_node_id

    @property
    def viewport_id(self):
        return self.__viewport_id

    def setViewportId(self, vp_id):
        self.__viewport_id = vp_id

    def onConnectionCreated(self, connInfo):
        self._connections.append(connInfo['conn'])


    def register_node(self, node):

        print('REGISTER: {}'.format(node))

        self._node_map[node.node_id] = node
        if node.node_type not in self._node_type_map:
            self._node_type_map[node.node_type] = []

        # autogenerated name
        node_name = '{}{}'.format(
            node.node_type, len(self._node_type_map[node.node_type]) + 1)

        node.set_name(node_name)
        self._node_type_map[node.node_type].append(node)

        node.selected.connect(self.onNodeSelected)


    def createNode(self, node_type):
        raise Exception('create_node not implemented - implement in subclass')


    def deleteNode(self, node):
        nodeId = node.node_id
        del self._node_map[nodeId]
        for plug in node.in_plugs:
            for conn in plug.connections[:]:
                plug.remove_connection(conn)
                # conn.deleteItemLater()
                conn.setVisible(False)

        for plug in node.out_plugs:
            for conn in plug.connections[:]:
                print('plug dest: {}'.format(conn.plug_dest.node))
                print('plug src? {}'.format(conn.plug_source.node))
                conn.plug_source.remove_connection(conn)
                # conn.deleteItemLater()
                conn.setVisible(False)


        # node.deleteItemLater()
        node.setVisible(False)


    def getNodeById(self, node_id):
        return self._node_map.get(node_id)

    def onNodeSelected(self, md):

        for node in self._node_map.values():
            if node.node_id != md['node_id']:
                node.setSelected(False)

            node.update()

        self.selectedNode = md['node']

    def setDisplayNode(self, node):
        for snode in self._node_map.values():
            snode.setDisplay(False)
            snode.update()

        node.setDisplay(True)
        node.update()


    def mousePressEventItem(self, event):
        self.view.mousePressEventItem(event)

    def mouseMoveEventItem(self, event):
        self.view.mouseMoveEventItem(event)


    def onParentSizeChangedItem(self, width, height):
        self.setWidth(width)
        self.setHeight(height)

    def hide(self):

        # for conn in self._connections:
        #     conn.hideItem()

        for node in self._node_map.values():
            node.hideItem()

        self.hideItem()


    def show(self):
        for node in self._node_map.values():
            node.showItem()

        self.showItem()

        # for conn in self._connections:
        #     conn.showItem()


    def to_json(self):
        return {
            'view_id': self.view.viewId,
            'viewport_id': self.viewport_id
        }